---
- name: "apt-get update"
  apt: update_cache=yes

- name: "Install haveged (makepasswd dependency to prevent freezing)"
  apt: pkg=haveged state=latest

- name: "Install makepasswd"
  apt: pkg=makepasswd state=latest

- name: "Install Git"
  apt: pkg=git state=latest

- name: "Install tig"
  apt: pkg=tig state=latest

- name: "Install curl"
  apt: pkg=curl state=latest

- name: "Install php-mbstring"
  apt: pkg=php-mbstring state=latest

- name: "Install php-gd"
  apt: pkg=php-gd state=latest

- name: "Install nodejs"
  apt: pkg=nodejs state=latest

- name: "Install npm"
  apt: pkg=npm state=latest

- name: "Install rake"
  apt: pkg=rake state=latest

- name: "Install python-mysqldb"
  apt: pkg=python-mysqldb state=latest

- name: "Ensure optional system packages are installed as defined in config"
  tags: test
  with_items: "{{ packages }}"
  apt: pkg="{{ item.package }}" state=present
  when: item.install == True

- name: "Remove optional system packages that have been removed from config"
  tags: test
  with_items: "{{ packages }}"
  apt: pkg="{{ item.package }}" state=absent
  when: item.install == False

- name: "Install composer"
  shell: "curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer"
  args:
    creates: /usr/local/bin/composer

- name: "Install drush"
  tags: drush
  shell: "{{ item }}"
  with_items:
    - "git clone https://github.com/drush-ops/drush.git /usr/local/src/drush"
    - "ln -sf /usr/local/src/drush/drush /usr/local/bin/drush"
  args:
    creates: /usr/local/bin/drush

- name: "Get current drush version"
  tags: drush
  shell: "drush --version | cut -f2 -d ':' | xargs"
  changed_when: false
  register: drush_current_version

- name: "Update drush version"
  tags: drush
  shell: "{{ item }}"
  with_items:
    - "cd /usr/local/src/drush && git checkout {{ drush_version }}"
    - "cd /usr/local/src/drush && composer install"
  when:
    - ('{{ drush_current_version.stdout }}' != '{{ drush_version }}')

- name: Create a password for root
  shell: "{{ item }}"
  with_items:
    - "mkdir -p /root/passwords"
    - "makepasswd -chars {{ password_chars }} > /root/passwords/root"
    - "chmod 700 /root/passwords/root"
  args:
    creates: /root/passwords/root

- name: Get password for root
  shell: "cat /root/passwords/root"
  changed_when: false
  register: root_password

- name: Set root password
  shell: "echo root:$(cat /root/passwords/root) | chpasswd"
  when: "root_password.stdout != ''"

- name: Fetch password for root
  fetch:
  args:
    dest: "fetched/{{ hostname }}/passwords/root"
    src: /root/passwords/root
    fail_on_missing: yes
    flat: yes
    validate_checksum: yes
  when: "root_password.stdout != ''"

# Leave password file in place so the password creation task doesn't fire.
- name: Remove cleartext password temporary file
  shell: "cat /dev/null > /root/passwords/root"
  when: ('{{ root_password.stdout }}' != '' and remove_user_passwords == true)

# Docker

- name: Add docker apt keys
  apt_key: keyserver=hkp://p80.pool.sks-keyservers.net:80 id=58118E89F3A912897C070ADBF76221572C52609D
  when: install_docker

- name: Add docker repository
  apt_repository: repo='deb https://apt.dockerproject.org/repo {{ ubuntu_version_name }} main' state=present
  when: install_docker

- name: Install docker
  apt: pkg=docker-engine update_cache=yes
  when: install_docker

- name: Install pip
  apt: pkg=python-pip

- name: Install docker-py with pip
  pip: name=docker-py
  tags: docker
  when: install_docker

# Solr

- name: Solr container
  when: install_solr and install_docker
  tags: solr
  docker:
    name: apachesolr-5
    image: mxr576/apachesolr-5.x-drupal-docker
    restart_policy: always
    ports:
      - "8983:8983"
    env:
      SOLR_MEM_SIZE: 1g
    volumes:
      - /opt/solr/server/solr/drupal/data:/opt/solr/server/solr/drupal/data
      - /opt/solr/server/solr/drupal/conf:/opt/solr/server/solr/drupal/conf
      - /var/log/supervisor/
    state: restarted

# Reload apache

- name: Enable mod_rewrite module
  apache2_module:
    state: present
    name: rewrite
  tags: apache

- name: Reload apache
  service:
    name: apache2
    state: reloaded
  tags: apache
